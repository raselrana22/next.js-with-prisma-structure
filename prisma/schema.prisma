// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// User table
model users {
  id         BigInt     @id@default(autoincrement())    @db.UnsignedBigInt
  firstName  String
  middleName String
  lastName   String
  email      String     @unique
  mobile     String
  passwordHash   String


  registeredAt DateTime   @default(now())   @db.Timestamp(0)
  lastLogin DateTime   @default(now())   @db.Timestamp(0)    @updatedAt

  // Define the relationship with `customers` table
  customers   customers[] // we can use the related field without specifying onDelete or onUpdate

  // Define the relationship with the `categories` table
  categories categories[]

  // Define the relationship with the `invoices` table
  invoices invoices[]

  // Define the relationship with the `products` table
  products products[]

  // Define the relationship wiith the `invoice_product` table
  invoice_product invoice_product[]
}


// Customers table
model customers {
  id         BigInt     @id @default(autoincrement())   @db.UnsignedBigInt
  name       String
  email      String
  mobile     String
  user_id    BigInt     @db.UnsignedBigInt  // Foreign key
  created_at DateTime   @default(now()) @db.Timestamp(0)
  updated_at DateTime   @default(now()) @db.Timestamp(0)    @updatedAt
  
  // Define the relationship with `users` table
  user       users      @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  // Define the relation with `invoice` table
  invoices invoices[]

}


//Category table
model categories{
  id         BigInt     @id   @default(autoincrement())   @db.UnsignedBigInt
  name       String
  user_id    BigInt     @db.UnsignedBigInt // Foreign key
  created_at DateTime   @default(now())   @db.Timestamp(0)
  updated_at DateTime   @default(now())   @db.Timestamp(0)    @updatedAt

  // Define the reletionship with the `users` table
  users     users       @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

   // Define the relation with `invoice` table
  products products[]
}


//Invoices table
model invoices{
  id          BigInt    @id @default(autoincrement())   @db.UnsignedBigInt
  total       String
  discount    String
  vat         String
  payable     String
  user_id     BigInt    @db.UnsignedBigInt  // Foreign key
  customer_id BigInt    @db.UnsignedBigInt  // Foreign key
  created_at  DateTime  @default(now())   @db.Timestamp(0)
  updated_at  DateTime  @default(now())   @db.Timestamp(0)    @updatedAt 

  // Define the relation with the `users` table
  users       users     @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  // Define the relation with the `customer` table
  cutomers    customers    @relation(fields: [customer_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  // Define the relation with the `invoice_product` table
  invoice_product invoice_product[]
}



//Product table
model products{
  id          BigInt    @id   @default(autoincrement())   @db.UnsignedBigInt
  user_id     BigInt    @db.UnsignedBigInt // Foreign key
  category_id BigInt    @db.UnsignedBigInt // Foreign key
  name        String
  price       String
  unit        String
  img_url     String
  created_at  DateTime  @default(now())   @db.Timestamp(0)
  updated_at  DateTime  @default(now())   @db.Timestamp(0)    @updatedAt

  // Define the relationship with the `users` table
  users       users     @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  // Define the relationship with the `categories` table
  categories  categories    @relation(fields: [category_id], references: [id], onDelete: Restrict, onUpdate: Cascade) 

  // Define the relaththionship with the `invoice_product` table
  invoice_product   invoice_product[]
}



// The invoice product table
model invoice_product { // Renamed to follow Prisma naming conventions (singular and PascalCase)
  id         BigInt     @id @default(autoincrement())   @db.UnsignedBigInt
  invoice_id BigInt     @db.UnsignedBigInt // Foreign key
  product_id BigInt     @db.UnsignedBigInt // Foreign key
  user_id    BigInt     @db.UnsignedBigInt // Foreign key
  qty        String       
  sale_price String   
  created_at DateTime   @default(now())    @db.Timestamp(0)
  updated_at DateTime   @default(now())    @db.Timestamp(0)    @updatedAt

  // Define the relation with the `users` table
  users      users    @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  // Define the relationship with the `products` table
  products   products   @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  //Define the relathionship with the `incoices` table
  invoices   invoices   @relation(fields: [invoice_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}